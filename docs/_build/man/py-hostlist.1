.\" Man page generated from reStructuredText.
.
.TH "PY-HOSTLIST" "1" "Jul 18, 2018" "" "py-hostlist"
.SH NAME
py-hostlist \- py-hostlist Documentation
.
.nr rst2man-indent-level 0
.
.de1 rstReportMargin
\\$1 \\n[an-margin]
level \\n[rst2man-indent-level]
level margin: \\n[rst2man-indent\\n[rst2man-indent-level]]
-
\\n[rst2man-indent0]
\\n[rst2man-indent1]
\\n[rst2man-indent2]
..
.de1 INDENT
.\" .rstReportMargin pre:
. RS \\$1
. nr rst2man-indent\\n[rst2man-indent-level] \\n[an-margin]
. nr rst2man-indent-level +1
.\" .rstReportMargin post:
..
.de UNINDENT
. RE
.\" indent \\n[an-margin]
.\" old: \\n[rst2man-indent\\n[rst2man-indent-level]]
.nr rst2man-indent-level -1
.\" new: \\n[rst2man-indent\\n[rst2man-indent-level]]
.in \\n[rst2man-indent\\n[rst2man-indent-level]]u
..
.sp
py\-hostlist processes slurm\-style hostlist strings and can return those strings in manipulated fashion.
.sp
Get py\-hostlist from the \fI\%github repository\fP and start using it!
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
$ git clone https://github.com/llnl/py\-hostlist.git
$ cd py\-hostlist
.ft P
.fi
.UNINDENT
.UNINDENT
.SH FEATURES
.sp
This is a high\-level overview of features that make up py\-hostlist, a Python implementation of a hostlist manager.
.SS Using Regular Expressions
.sp
py\-hostlist utilizes the \fI\%re\fP package to look for certain types of hostlist strings to manipulate. Once it matches with a hostlist string, it breaks up the expression into certain control groups with which it can perform a number of operations on. In general, input hostlist strings are broken up into three control groups:
.INDENT 0.0
.IP 1. 3
the host name
.IP 2. 3
the range of nodes contained by the host
.IP 3. 3
any suffixes or domains appended to the hostlist
.UNINDENT
.SS String Manipulation
.sp
After an input string is matched, the control groups are cast to string variables, where they can be stripped of characters such as brackets, dashes, and commas in order to perform necessary operations, such as expanding or compressing a list.
.SS Different Input Types
.sp
py\-hostlist is flexible with the types of input passed into its methods. Both lists and strings can be passed into each of the operations that it supports. For example, the compress method accepts the following list input:
.sp
\fB[\(aqnode1\(aq,\(aqnode2\(aq,\(aqnode3\(aq,\(aqnode4\(aq]\fP
.sp
as well as a simple string:
.sp
\fB\(aqnode1,node2,node3,node4\(aq\fP
.sp
Both will return the following: \fBnode[1\-4]\fP
.sp
py\-hostlist achieves this functionality by checking the type of input before it attempts to do any manipulations/operations.
.SH BASIC USAGE
.sp
You can use the command line to process your hostlist strings by using the following command:
.sp
\fBpython cla_hostlist.py <method> <args>...\fP
.sp
Here is a list of all of the methods available:
.INDENT 0.0
.TP
.B \fB\-h, \-\-help\fP
Display this message.
.TP
.B \fB\-q, \-\-quiet\fP
Quiet output (exit non\-zero if empty hostlist)
.TP
.B \fB\-d, \-\-delimiters\fP
Set output delimiter (default = ",")
.TP
.B \fB\-c, \-\-count\fP
Print the number of hosts
.TP
.B \fB\-s, \-\-size\fP
Output at most N hosts (\-N for last N hosts)
.TP
.B \fB\-e, \-\-expand\fP
Expand a compressed hostlist
.TP
.B \fB\-a, \-\-abbreviate\fP
Compress an expanded hostlist
.TP
.B \fB\-t, \-\-tighten\fP
Return a hostlist string
.TP
.B \fB\-m, \-\-minus\fP
Subtract all HOSTLIST args from first HOSTLIST
.TP
.B \fB\-i, \-\-intersection\fP
Intersection of all HOSTLIST args
.TP
.B \fB\-x, \-\-exclude\fP
Exclude all HOSTLIST args from first HOSTLIST
.TP
.B \fB\-X, \-\-xor\fP
Symmetric difference of all HOSTLIST args
.TP
.B \fB\-u, \-\-union\fP
Union of all HOSTLIST arguments
.TP
.B \fB\-n, \-\-nth=N\fP
Output the host at index N
.TP
.B \fB\-R, \-\-remove\fP
Remove all occurences of NODE from HOSTLIST
.TP
.B \fB\-S, \-\-sort\fP
Return sorted HOSTLIST
.TP
.B \fB\-F, \-\-find=HOST\fP
Output position of HOST in result HOSTLIST
.UNINDENT
.sp
For example, to execute the expand function displayed above, users can run the following:
.sp
\fBpython cla_hostlist.py \-e node[1\-4]\fP
.sp
This will return \fBnode1,node2,node3,node4\fP\&.
.SH METHOD REFERENCE
.sp
This is a high\-level overview of the methods that make up py\-hostlist.
.SS Methods
.INDENT 0.0
.TP
.B \fBexpand(nodelist)\fP
.INDENT 7.0
.TP
\fBParameters\fP:
nodelist \fB(str)\fP \- The hostlist string.
.UNINDENT
.sp
\fBReturns\fP: An expanded hostlist string.
.sp
\fBDescription\fP: expand takes in a hostlist string and returns a list of individual hostnames. For example, the input string \fBnode[1\-4]\fP will return \fBnode1,node2,node3,node4\fP\&. The expand method will return the suffix string in its final expansion, as well as prepend any leading zeros found in the input string. Multiple ranges can be specified within brackets of a cluster like so:
.sp
\fBnode[1\-4,6\-10,19].suffix.com\fP
.sp
Multiple clusters to be expanded can also be specified in an input string by separating the clusters with a comma followed by a space. An example below:
.sp
\fBnode1\-[1\-4], node2\-[5\-9].suffix.com\fP
.TP
.B \fBcompress_range(nodelist)\fP
.INDENT 7.0
.TP
\fBParameters\fP:
nodelist \fB(str)\fP or \fB(list)\fP \- The expanded hostlist string.
.UNINDENT
.sp
\fBReturns\fP: A compressed hostlist string.
.sp
\fBDescription\fP: compress_range takes in a hostlist list string and returns an ordered hostlist with a range. For example, the input list \fB[\(aqnode1\(aq,\(aqnode2\(aq,\(aqnode3\(aq,\(aqnode4\(aq]\fP will return \fBnode[1\-4]\fP\&. The compress_range method can also recognize multiple ranges.
.sp
compress_range can also recognize a string input. Going back to the example above, the following input will also be recognized: \fB\(aqnode1,node2,node3,node4\(aq\fP\&. This will also return \fBnode[1\-4]\fP\&.
.TP
.B \fBcompress(nodelist)\fP
.INDENT 7.0
.TP
\fBParameters\fP:
nodelist \fB(str)\fP \- The hostlist string.
.UNINDENT
.sp
\fBReturns\fP: An ordered hostlist string.
.sp
\fBDescription\fP: compress takes in a hostlist list string and returns an ordered hotlist string. For example, the input string \fB[\(aqnode1\(aq,\(aqnode2\(aq,\(aqnode3\(aq,\(aqnode4\(aq]\fP will return \fB[node1,node2,node3,node4]\fP\&.
.TP
.B \fBdiff(nodelist1, nodelist2)\fP
.INDENT 7.0
.TP
\fBParameters\fP:
nodelist1 \fB(str)\fP or \fB(list)\fP \- The hostlist string to be subtracted from.
.sp
following nodelists... \fB(str)\fP or \fB(list)\fP: The other hostlist strings.
.UNINDENT
.sp
\fBReturns\fP: A remaining hostlist string resulting from subtracting the following nodelists from nodelist1.
.sp
\fBDescription\fP: diff will subtract elements in all following nodelists from nodelist1 and return a remaining hostlist. It accepts both string and list inputs.
.TP
.B \fBintersect(*arg)\fP
.INDENT 7.0
.TP
\fBParameters\fP:
hostlist strings \fB(str)\fP or \fB(list)\fP \- Any number of nodelists to be intersected.
.UNINDENT
.sp
\fBReturns\fP: An intersecting hostlist string from all hostlist args.
.sp
\fBDescription\fP: intersect will return a list of intersection nodes given n lists of nodes. It will sort the nodes in ascending order upon returning.
.TP
.B \fBunion_nodes(*arg)\fP
.INDENT 7.0
.TP
\fBParameters\fP:
hostlist strings \fB(str)\fP or \fB(list)\fP \- Any number of nodelists to be combined.
.UNINDENT
.sp
\fBReturns\fP: A union hostlist string from all hostlist args.
.sp
\fBDescription\fP: union will return the union between n lists of nodes. It will sort the nodes in ascending order upon returning.
.TP
.B \fBnth(nodelist, n)\fP
.INDENT 7.0
.TP
\fBParameters\fP:
nodelist \fB(str)\fP or \fB(list)\fP \- The hostlist string.
.sp
n \fB(int)\fP \- The index to search.
.UNINDENT
.sp
\fBReturns\fP: The host at the specified index.
.sp
\fBDescription\fP: nth takes in two parameters: a hostlist string (similar to expand()\(aqs parameter) and an index \fIn\fP\&. It will return the \fInth\fP node in that range.
.TP
.B \fBfind(nodelist, node)\fP
.INDENT 7.0
.TP
\fBParameters\fP:
nodelist \fB(str)\fP or \fB(list)\fP \- The hostlist string.
.sp
node \fB(str)\fP \- The host to be searched inside of the hostlist string.
.UNINDENT
.sp
\fBReturns\fP: The position of the host within the hostlist string.
.sp
\fBDescription\fP: find will return the position of the node in the input nodelist.
.TP
.B \fBcount(nodelist)\fP
.INDENT 7.0
.TP
\fBParameters\fP:
nodelist \fB(str)\fP or \fB(list)\fP \- The hostlist string.
.UNINDENT
.sp
\fBReturns\fP: The number of nodes in the hostlist string.
.sp
\fBDescription\fP: count will print the number of hosts in the nodelist. The input can accept a hostlist that is already expanded or one that contains ranges. For example, the input \fBnode[1\-5]\fP will return \fB5\fP\&.
.TP
.B \fBremove_node(nodelist, node)\fP
.INDENT 7.0
.TP
\fBParameters\fP:
nodelist \fB(str)\fP or \fB(list)\fP \- The hostlist string.
.sp
node \fB(str)\fP \- The node to be removed.
.UNINDENT
.sp
\fBReturns\fP: The resulting hostlist upon deletion.
.sp
\fBDescription\fP: remove_node() will remove all occurences of \fInode\fP in the nodelist. The input can accept a hostlist that is already expanded or one that contains ranges.
.TP
.B \fBdelimiter(nodelist, d)\fP
.INDENT 7.0
.TP
\fBParameters\fP:
nodelist \fB(str)\fP or \fB(list)\fP \- The hostlist string.
.sp
d \fB(str)\fP \- The custom delimiter.
.UNINDENT
.sp
\fBReturns\fP: The resulting hostlist string with its custom delimiter.
.sp
\fBDescription\fP: delimiter() will take the hostlist string and output it with the specified delimiter \fId\fP, which can be any string.
.TP
.B \fBsize_hostlist(nodelist, N)\fP
.INDENT 7.0
.TP
\fBParameters\fP:
nodelist \fB(str)\fP or \fB(list)\fP \- The hostlist string.
.sp
N \fB(int)\fP \- The number of hosts to print.
.UNINDENT
.sp
\fBReturns\fP: The resulting hostlist string with custom size.
.sp
\fBDescription\fP: This method will print at most \fIN\fP hosts from the hostlist input. If a negative \fIN\fP is passed in, the output will consist of the last N hosts from the hostlist input.
.TP
.B \fBxor(*arg)\fP
.INDENT 7.0
.TP
\fBParameters\fP:
hostlist strings \fB(str)\fP or \fB(list)\fP \- Any number of nodelists to be combined.
.UNINDENT
.sp
\fBReturns\fP: The resulting xor list.
.sp
\fBDescription\fP: xor() takes the symmetric difference of an arbitrary number of hostlists passed in.
.TP
.B \fBexclude(*arg)\fP
.INDENT 7.0
.TP
\fBParameters\fP:
nodelist \fB(str)\fP or \fB(list)\fP \- The hostlist string.
.sp
node \fB(str)\fP \- The node to be excluded.
.UNINDENT
.sp
\fBReturns\fP: The resulting hostlist string without the nodes specified.
.sp
\fBDescription\fP: exclude() will return a hostlist that excludes any nodes specified after the first argument, which is the original hostlist. Each node to be excluded must be passed in one at a time as separate arguments.
.TP
.B \fBquiet(nodelist=[])\fP
.INDENT 7.0
.TP
\fBParameters\fP:
nodelist \fB(str)\fP or \fB(list)\fP \- The hostlist string.
.UNINDENT
.sp
\fBReturns\fP: None or non\-zero output if an empty hostlist is passed in.
.sp
\fBDescription\fP: returns quiet output for a hostlist input. It will exit non\-zero if there is an empty hostlist passed in.
.UNINDENT
.SS Helper Methods
.INDENT 0.0
.TP
.B \fBappend_hostname(machine_name, num_list)\fP
.INDENT 7.0
.TP
\fBParameters\fP:
machine_name \fB(str)\fP \- The name of the cluster.
.sp
num_list \fB(list)\fP \- The list of nodes to be appended to the cluster name.
.UNINDENT
.sp
\fBReturns\fP: A hostlist string with the hostname and node numbers.
.sp
\fBDescription\fP: append_hostname takes in two parameters: the name of the machine and its range of nodes; it is a helper method that will append the machine name (the host) to the node numbers it contains.
.TP
.B \fBsort_nodes(nodelist)\fP
.INDENT 7.0
.TP
\fBParameters\fP:
nodelist \fB(str)\fP \- The hostlist string.
.UNINDENT
.sp
\fBReturns\fP: The hostlist string in ascending order.
.sp
\fBDescription\fP: sort_nodes takes in a list of nodes; it is a helper method that will return a sorted string of those nodes in ascending order.
.UNINDENT
.SH CONTRIBUTION GUIDE
.sp
This guide is intended for developers or administrators who want to contribute a new feature or bugfix to py\-hostlist. It assumes that you have at least some familiarity with Git VCS and GitHub. The guide will show a few examples of contributing workflows and discuss the granularity of pull\-requests (PRs). It will also discuss the tests your PR must pass in order to be accepted into py\-hostlist.
.sp
First, what is a PR? Quoting \fI\%Bitbucket\(aqs tutorials\fP:
.INDENT 0.0
.INDENT 3.5
Pull requests are a mechanism for a developer to notify team members that they have \fBcompleted a feature\fP\&. The pull request is more than just a notification—it’s a dedicated forum for discussing the proposed feature.
.UNINDENT
.UNINDENT
.sp
Important is \fBcompleted feature\fP\&. The changes one proposes in a PR should correspond to one feature/bugfix/extension/etc. One can create PRs with changes relevant to different ideas, however reviewing such PRs becomes tedious and error prone. If possible, try to follow the \fBone\-PR\-one\-package/feature\fP rule.
.SS Continuous Integration
.sp
py\-hostlist uses \fI\%Travis CI\fP for Continuous Integration testing. This means that every time you submit a pull request, a series of tests will be run to make sure you didn\(aqt accidentally introduce any bugs into py\-hostlist. \fBYour PR will not be accepted until it passes all of these tests.\fP While you can certainly wait for the results of these tests after submitting a PR, we recommend that you run them locally to speed up the review process.
.sp
\fBNOTE:\fP
.INDENT 0.0
.INDENT 3.5
Oftentimes, Travis will fail for reasons other than a problem with your PR.
For example, apt\-get, pip, or homebrew will fail to download one of the
dependencies for the test suite, or a transient bug will cause the unit tests
to timeout. If Travis fails, click the "Details" link and click on the test(s)
that is failing. If it doesn\(aqt look like it is failing for reasons related to
your PR, you have two options. If you have write permissions for the py\-hostlist
repository, you should see a "Restart job" button on the right\-hand side. If
not, you can close and reopen your PR to rerun all of the tests. If the same
test keeps failing, there may be a problem with your PR. If you notice that
every recent PR is failing with the same error message, it may be that Travis
is down or one of py\-hostlist\(aqs dependencies put out a new release that is causing
problems. If this is the case, please file an issue.
.UNINDENT
.UNINDENT
.sp
If you take a look in \fBpy\-hostlist/.travis.yml\fP, you\(aqll notice that we test
against Python 2.7, and 3.3\-3.7 on macOS. We currently perform unit testing:
.sp
Unit tests ensure that core py\-hostlist features like expand or compress_range are working as expected. If your PR only adds new packages or modifies existing ones, there\(aqs very little chance that your changes could cause the unit tests to fail. However, if you make changes to py\-hostlist\(aqs core libraries, you should run the unit tests to make sure you didn\(aqt break anything.
.sp
To run the unit tests, use:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
$ python py\-hostlist/unittest_hostlist.py
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
It should only take a few seconds to complete. If you know you are only modifying a single feature, you can run a single unit test at a time:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
$ python py\-hostlist/unittest_hostlist.py TestHostlistMethods.test_expand
.ft P
.fi
.UNINDENT
.UNINDENT
.SS Git Workflows
.sp
py\-hostlist is still in the alpha stages of development. Most of our users run off of
the develop branch, and fixes and new features are constantly being merged. So
how do you keep up\-to\-date with upstream while maintaining your own local
differences and contributing PRs to py\-hostlist?
.SS Branching
.sp
The easiest way to contribute a pull request is to make all of your changes on new branches. Make sure your \fBdevelop\fP is up\-to\-date and create a new branch off of it:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
$ git checkout develop
$ git pull upstream develop
$ git branch <descriptive_branch_name>
$ git checkout <descriptive_branch_name>
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
Here we assume that the local \fBdevelop\fP branch tracks the upstream develop branch of py\-hostlist. This is not a requirement and you could also do the same with remote branches. But for some it is more convenient to have a local branch that tracks upstream.
.sp
Normally we prefer that commits pertaining to a package \fB<package\-name>\fP have a message \fB<package\-name>: descriptive message\fP\&. It is important to add descriptive message so that others, who might be looking at your changes later would understand the rationale behind them.
.sp
Now, you can make your changes while keeping the \fBdevelop\fP branch pure.
Edit a few files and commit them by running:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
$ git add <files_to_be_part_of_the_commit>
$ git commit \-\-message <descriptive_message_of_this_particular_commit>
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
Next, push it to your remote fork and create a PR:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
$ git push origin <descriptive_branch_name> \-\-set\-upstream
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
GitHub provides a \fI\%tutorial\fP
on how to file a pull request. When you send the request, make \fBdevelop\fP the
destination branch.
.SH DEVELOPER GUIDE
.SH PY-HOSTLIST PACKAGE
.SS Submodules
.SS py\-hostlist.args_hostlist module
.SS py\-hostlist.cla_hostlist module
.SS py\-hostlist.hostlist module
.SS py\-hostlist.unittest_hostlist module
.SS Module contents
.SH PY-HOSTLIST
.INDENT 0.0
.IP \(bu 2
genindex
.IP \(bu 2
modindex
.IP \(bu 2
search
.UNINDENT
.SH AUTHOR
Christopher Moussa
.SH COPYRIGHT
2018, Christopher Moussa
.\" Generated by docutils manpage writer.
.
